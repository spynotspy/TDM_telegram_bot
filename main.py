import asyncio
import logging
import json
import random

from aiogram import Bot, types, Dispatcher, F, Router
from aiogram.dispatcher import router
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery, InputFile, FSInputFile

from keyboards import admin_kb, user_kb, user_kb_edit, courier_kb_edit, help_kb_user_only, help_kb_courier_only
from database import add_user, add_username, add_user_number, add_address, add_positive_gift, add_negative_gift, \
    add_courier, add_courier_name, add_courier_numb, retrieve_and_return_names, export_data_to_json, \
    export_data_to_xlsx, check_user, check_courier, get_users_id, get_user_data_by_id, get_users_data_for_couriers

from TOKENS import ADMIN_ID, BOT_TOKEN
from backup import upload_on_disk

router = Router()

bot = Bot(BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

commands = {'/start': '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞', '/help': '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
            '/json': '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª'}


async def on_startup(_):
    print("bot online")


####################################__–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–ê__####################################################

class user_reg(StatesGroup):
    name = State()
    numb = State()
    address = State()
    gift_positive = State()
    gift_negative = State()


@dp.message(Command("json"))
async def export_data_json(message: types.Message):
    export_data_to_json()

    file_input = FSInputFile('users_data.json')
    await bot.send_document(message.chat.id, file_input, caption='–î–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–∞—Ö –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö')


@dp.message(Command("xlcx"))
async def export_data_docx(message: types.Message):
    export_data_to_xlsx()

    file_input = FSInputFile('users_data.xlsx')
    await bot.send_document(message.chat.id, document=file_input, caption='–î–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–∞—Ö –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö')


@dp.callback_query(F.data == "members" or Command("members"))
async def send_members_list(call: types.CallbackQuery):
    user_names, courier_names = retrieve_and_return_names()
    user_names_text = "\n".join(user_names)
    courier_names_text = "\n".join(courier_names)
    await call.message.answer(f"–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n{user_names_text}")
    await call.message.answer(f"–°–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤:\n{courier_names_text}")


@dp.callback_query(F.data == "reg")
async def start_registration(call: types.CallbackQuery, state=FSMContext):
    if check_user(call.message.chat.id):
        await call.message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫—É—Ä—å–µ—Ä.")
        await state.clear()
    else:
        add_user(call.message)
        await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è: ")
        await state.set_state(user_reg.name)


@dp.message(user_reg.name)
async def add_name(message: types.Message, state=FSMContext):
    chat_id = message.chat.id
    await state.update_data(name=message.text)
    add_username(message)
    await bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(user_reg.numb)


@dp.message(user_reg.numb)
async def add_name(message: types.Message, state=FSMContext):
    chat_id = message.chat.id
    await state.update_data(numb=message.text)
    add_user_number(message)
    await bot.send_message(chat_id,
                           "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.\n –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –∏–Ω–∞—á–µ –ø–æ–¥–∞—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π —Å:")
    await state.set_state(user_reg.address)


@dp.message(user_reg.address)
async def add_numb(message: types.Message, state=FSMContext):
    chat_id = message.chat.id
    await state.update_data(address=message.text)
    add_address(message)
    await bot.send_message(chat_id,
                           "–¢–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –ø—Ä–∏—è—Ç–Ω–æ–µ: –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Å–≤–æ–µ–º—É –ø–æ–¥–∞—Ä–∫—É, —Ç.–µ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å")
    await state.set_state(user_reg.gift_positive)


@dp.message(user_reg.gift_positive)
async def add_name(message: types.Message, state=FSMContext):
    chat_id = message.chat.id
    await state.update_data(gift_positive=message.text)
    add_positive_gift(message)
    await bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤—ã —Ç–æ—á–Ω–æ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–∞—Ä–∫–∞:")
    await state.set_state(user_reg.gift_negative)


@dp.message(user_reg.gift_negative)
async def add_name(message: types.Message, state=FSMContext):
    chat_id = message.chat.id
    await state.update_data(gift_negative=message.text)
    add_negative_gift(message)
    await bot.send_message(chat_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∂–µ—Ä–µ–±—å—ë–≤–∫–∏.\n"
                                    "P.S: –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∑–∞–Ω–æ–≤–æ",
                           reply_markup=user_kb_edit.as_markup())
    await state.clear()
    upload_on_disk()


################################################################################################

###################################__–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞__#############################################################
class courier_reg(StatesGroup):
    name = State()
    numb = State()
    is_available = State()
    delivery_status = State()


@dp.callback_query(F.data == "courier")
async def start_registration(call: types.CallbackQuery, state=FSMContext):
    if check_courier(call.message.chat.id):
        await call.message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        await state.clear()
    else:
        add_courier(call.message)
        await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è: ")
        await state.set_state(courier_reg.name)


@dp.message(courier_reg.name)
async def add_name_courier(message: types.Message, state=FSMContext):
    chat_id = message.chat.id
    await state.update_data(name=message.text)
    add_courier_name(message)
    await bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(courier_reg.numb)


@dp.message(courier_reg.numb)
async def add_numb_courier(message: types.Message, state=FSMContext):
    chat_id = message.chat.id
    await state.update_data(numb=message.text)
    add_courier_numb(message)
    await bot.send_message(chat_id,
                           "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏. –û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!\n"
                           "P.S: –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                           reply_markup=courier_kb_edit.as_markup())
    await state.clear()
    upload_on_disk()

    # await state.set_state(courier_reg.is_available)


################################################################################################

@dp.callback_query(F.data == "data_for_couriers")
async def members_list_for_couriers(call: types.CallbackQuery):
    names, numbers, addresses = get_users_data_for_couriers()
    for i in range(len(names)):
        await call.message.answer(f"–ò–º—è: {names[i]}, –ù–æ–º–µ—Ä: {numbers[i]}, –ê–¥—Ä–µ—Å: {addresses[i]}")


@dp.message(Command("help"))
async def help_command(message: types.Message):
    if check_courier(message.chat.id):
        await message.answer("–í–æ—Ç, –ø–æ—Ç—ã–∫–∞–π—Ç–µ —Ç—É—Ç", reply_markup=help_kb_user_only.as_markup())
    if check_user(message.chat.id):
        await message.answer("–í–æ—Ç, –ø–æ—Ç—ã–∫–∞–π—Ç–µ —Ç—É—Ç. –î–ª—è –∫—É—Ä—å–µ—Ä–æ–≤", reply_markup=help_kb_courier_only.as_markup())


@dp.message(StateFilter(None), Command("start"))
async def start_command(message: types.Message, state=FSMContext):
    chat_id = message.chat.id
    if (chat_id == ADMIN_ID):
        await bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Çüëã! –¢—ã - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –¢–î–ú–∞, –∞ –∑–Ω–∞—á–∏—Ç —Ç–µ–±–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∂–µ—Ä–µ–±—ä–µ–≤–∫—É\n"
                                        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–∂–µ - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'.\n"
                                        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∂–µ—Ä–µ–±—å–µ–≤–∫—É - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ñ–µ—Ä–µ–±—å–µ–≤–∫–∞'.\n"
                                        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'.\n",
                               reply_markup=admin_kb.as_markup())

    else:
        await bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Çüëã! –í—ã–±–µ—Ä–∏ —Ä–æ–ª—å –¥–ª—è —É—á–∞—Å—Ç–∏—è.\n"
                                        "–ö—É—Ä—å–µ—Ä—ã - –æ–Ω–∏ –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –ø–æ–¥–∞—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞—Ç–∞–º, —Å–∞–º–∏ –≤ –∏–≥—Ä–µ –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–æ–≤\n",
                               reply_markup=user_kb.as_markup())


@dp.callback_query(F.data == "draw")
async def draw(message: types.Message):
    users = get_users_id()
    users_copy = users

    random.shuffle(users_copy)
    while (users_copy[-1] == users_copy[0]):
        random.shuffle(users_copy)

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–∞–º–∏ –±—É–¥—É—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ - –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ "–ø–∞—Ä—ã"
    pairs = {users_copy[i]: users_copy[i + 1] for i in range(len(users_copy) - 1)}
    pairs[users_copy[-1]] = users_copy[0]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–∏—Ä—É–µ—Ç—Å—è —Å –ø–µ—Ä–≤—ã–º

    for user_id, recipient_id in pairs.items():
        recipient_info = get_user_data_by_id(recipient_id)
        await bot.send_message(user_id, f"–¢–≤–æ–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å  {recipient_info[0]}\n"
                                        f"–ï–≥–æ –Ω–æ–º–µ—Ä - {recipient_info[1]}\n"
                                        f"–ï–≥–æ –∞–¥—Ä–µ—Å - {recipient_info[2]}\n"
                                        f"–¢–æ, —á—Ç–æ –æ–Ω —Ö–æ—Ç–µ–ª –±—ã –ø–æ–ª—É—á–∏—Ç—å - {recipient_info[3]}\n"
                                        f"–¢–æ, —á—Ç–æ –µ–º—É —Ç–æ—á–Ω–æ –Ω–µ —Å—Ç–æ–∏—Ç –¥–∞—Ä–∏—Ç—å - {recipient_info[4]}\n")
    upload_on_disk()


async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )

    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
